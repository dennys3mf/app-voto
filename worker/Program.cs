using System;using System.Data.Common;using System.Linq;using System.Net;using System.Net.Sockets;using System.Threading;using Newtonsoft.Json;using Npgsql;using StackExchange.Redis;namespace Worker{    public class Program    {        public static int Main(string[] args)        {            try            {                var pgsql = OpenDbConnection("Server=db;Username=postgres;Password=postgres;");                var redisConn = OpenRedisConnection("redis");                var redis = redisConn.GetDatabase();                // Keep alive is not implemented in Npgsql yet. This workaround was recommended:                // https://github.com/npgsql/npgsql/issues/1214#issuecomment-235828359                var keepAliveCommand = pgsql.CreateCommand();                keepAliveCommand.CommandText = "SELECT 1";                var definition = new { similarity = 0.0, voter_id = "" };                while (true)                {                    // Slow down to prevent CPU spike, only query each 100ms                    Thread.Sleep(100);                    // Reconnect redis if down                    if (redisConn == null || !redisConn.IsConnected) {                        Console.WriteLine("Reconnecting Redis");                        redisConn = OpenRedisConnection("redis");                        redis = redisConn.GetDatabase();                    }                    string json = redis.ListLeftPopAsync("similarities").Result;                    if (json != null)                    {                        var similarityData = JsonConvert.DeserializeAnonymousType(json, definition);                        Console.WriteLine($"Received similarity data for '{similarityData.voter_id}': {similarityData.similarity}");                        // Reconnect DB if down                        if (!pgsql.State.Equals(System.Data.ConnectionState.Open))                        {                            Console.WriteLine("Reconnecting DB");                            pgsql = OpenDbConnection("Server=db;Username=postgres;Password=postgres;");                        }                        else                        {                             // Update or insert similarity data                            if (UpdateSimilarity(pgsql, similarityData.voter_id, similarityData.similarity))                            {                                Console.WriteLine("Successfully uploaded to PostgreSQL");                            }                            else                            {                                Console.WriteLine("Failed to upload to PostgreSQL");                            }                        }                    }                    else                    {                        keepAliveCommand.ExecuteNonQuery();                    }                }            }            catch (Exception ex)            {                Console.Error.WriteLine(ex.ToString());                return 1;            }        }        private static NpgsqlConnection OpenDbConnection(string connectionString)        {            NpgsqlConnection connection;            while (true)            {                try                {                    connection = new NpgsqlConnection(connectionString);                    connection.Open();                    break;                }                catch (SocketException)                {                    Console.Error.WriteLine("Waiting for db");                    Thread.Sleep(1000);                }                catch (DbException)                {                    Console.Error.WriteLine("Waiting for db");                    Thread.Sleep(1000);                }            }            Console.Error.WriteLine("Connected to db");            var command = connection.CreateCommand();            command.CommandText = @"CREATE TABLE IF NOT EXISTS similarities (                                        id VARCHAR(255) NOT NULL UNIQUE,                                        similarity DOUBLE PRECISION NOT NULL                                    )";            command.ExecuteNonQuery();            return connection;        }        private static ConnectionMultiplexer OpenRedisConnection(string hostname)        {            // Use IP address to workaround https://github.com/StackExchange/StackExchange.Redis/issues/410            var ipAddress = GetIp(hostname);            Console.WriteLine($"Found redis at {ipAddress}");            while (true)            {                try                {                    Console.Error.WriteLine("Connecting to redis");                    return ConnectionMultiplexer.Connect(ipAddress);                }                catch (RedisConnectionException)                {                    Console.Error.WriteLine("Waiting for redis");                    Thread.Sleep(1000);                }            }        }        private static string GetIp(string hostname)            => Dns.GetHostEntryAsync(hostname)                .Result                .AddressList                .First(a => a.AddressFamily == AddressFamily.InterNetwork)                .ToString();        private static bool UpdateSimilarity(NpgsqlConnection connection, string voterId, double similarity)        {            var command = connection.CreateCommand();            try            {                command.CommandText = "INSERT INTO similarities (id, similarity) VALUES (@id, @similarity)";                command.Parameters.AddWithValue("@id", voterId);                command.Parameters.AddWithValue("@similarity", similarity);                command.ExecuteNonQuery();                return true;            }            catch (DbException)            {                try                {                    command.CommandText = "UPDATE similarities SET similarity = @similarity WHERE id = @id";                    command.ExecuteNonQuery();                    return true;                }                catch (Exception ex)                {                    Console.Error.WriteLine($"Error updating similarity in PostgreSQL: {ex}");                    return false;                }            }            finally            {                command.Dispose();            }        }    }}